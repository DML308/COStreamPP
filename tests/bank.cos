int bounds = 8;

composite adder(output stream<int x>Out,input stream<int x>In){
    Out = adder(In){
        work{
            Out[0].x = Out[0].x + Out[1].x;
            Out[1].x = Out[0].x + Out[1].x;
        }
        window{
            In sliding(2,2);
            Out tumbling(2);
        }
    };
}

composite subber(output stream<int x>Out,input stream<int x>In){
    Out = subber(In){
        work{
            Out[0].x = Out[0].x - Out[1].x;
            Out[1].x = Out[0].x - Out[1].x;
        }
        window{
            In sliding(2,2);
            Out tumbling(2);
        }
    };
}

composite BandStopFilter(output stream<int x>Out,input stream<int x>In){
    int i = 0;
    Out = splitjoin(In){
        split roundrobin(1,1,2);
        for(i=0;i<2;i++){
            add adder();
        }
        add splitjoin{
            split roundrobin(1);
            for(i=0;i<2;i++){
                add subber();
            }
            join roundrobin(1);
        }
        join roundrobin(1);
    };
}

composite Main(){
    stream<int x> Source,FBP;
    Source = DataSource(){
        int n = 0;
        work{
            if(n<8){
                Source[0].x = 1;
                n++;
            }
        }
        window {
            Source tumbling(1);
        }
    };
    FBP = BandStopFilter(Source)(8);
    FloatSink(FBP){
        work{
            println(FBP[0].x);
        }
        window {
            FBP tumbling(1);
        }
    };
}