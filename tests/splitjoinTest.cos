composite dTest(input stream<int i>In, output stream<int i>Out) {
	Out = dtest (In) {
		work {
			printf("d: ");
			printf(In[0].i);
			Out[0].i = In[0].i;
		}
		window {
			In sliding(1, 1);
			Out tumbling(1);
		}
	};
}
composite rTest(input stream<int i>In, output stream<int i>Out) {
	Out = rtest(In) {
		work {
			printf("r: ");
			printf(In[0].i);
			Out[0].i = In[0].i;
		}
		window {
			In sliding(1, 1);
			Out tumbling(1);
		}
	};
}
composite Main () {
	stream<int i>data, x, y;
	data = start () {
		int i = 0; 
		work {
			i++;
			if (i == 32) {
				i = 0;
			}
			data[0].i = i;
		}
		window {
			data tumbling(1, 1);
		}
	};
	y = splitjoin (data) {
		int i, j; 
		split duplicate();
			for (i = 0; i < 3; i++) {
				add splitjoin {
					split roundrobin();
					for (j = 0; j < 2; j++) {
						add rTest();
					}
					join roundrobin();
				}
			}
		join roundrobin();
	};
	sink(y) {
		int i;
		work {
			for (i = 0; i < 1; i++) {
				printf("sink: ");
				printf(y[i].i);
			}
		}
		window {
			y sliding (1, 1);
		}
	};
}

composite splitjoin(data){
	param
		int N;
	int i, j; 
	split duplicate();
		for (i = 0; i < N; i++) {
			add splitjoin {
				split roundrobin();
				for (j = 0; j < i; j++) {
					add rTest();
				}
				join roundrobin();
			}
		}
	join roundrobin();
}