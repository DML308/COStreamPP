double  PI = 3.141592654;

composite A(output stream<int x>Out, input stream<int x>In)
{
    param
        int size;
    Out=A(In)
    {
        work
        {
            double xx;
            xx=cos(PI/2);
            int i=1,j=1,k=0,x=2;
            K>>=1;
            double res[2*size];
            x|= (i&1);
            if(k==5)
                k++;
            
            for(i=x;i<size;i+=1)
            {   
                if(i==0)
                    k+=1;
                //K<<1;
            }
            x==1?i++:j++;


        }
        window
        {
            In sliding(3,3);
            Out tumbling(5);
        }    
    };          
}

composite B(output stream<int x>Out, input stream<int x>In)
{
    Out=B(In)
    {
        work{}
        window
        {
            In sliding(3,3);
            Out tumbling(3);
        }
    };
}

composite C(output stream<int x>Out, input stream<int x>In)
{
    Out=C(In)
    {
        work{}
        window
        {
            In sliding(10,10);
            Out tumbling(1);
        }
    };
}

composite Main()
{
    stream<int x> Source,CDFT;
    Source=Init()
    {
        work{}
        window
        {
            Source tumbling(2);        
        }
    };
    CDFT=pipeline(Source)
    {
        add A(8);
        add B();
        add C();

    };
    D(CDFT)
    {
        work {}
        window {CDFT sliding(2,2);}
    };
}