composite Main() {
    stream<double x> In, Out, Y;
    (In, Y) = Start() {
        int i = 0;
        work {
            // 28 * 28
            for(i = 0; i < 784; i++) {
                In[i].x = i % 255;
            }
            for(i = 0; i < 10; i++) {
                Y[i].x = i * 0.1;
            } 
        }
        window {
            In tumbling(784);
            Y tumbling(10);
        }
    };
    Out = sequential (In, Y) ((28, 28, 1), 0.0001, 100, "crossEntropy", 'gaussRandom') {
        // filters, kernel_size, strides, padding, use_bias  
        add Conv2D(32, (3, 3), (1, 1), (0, 0), false);
        add Activation("relu");
        add Conv2D(32, (3, 3), (1, 1), (0, 0), false);
        add Activation("relu");
        add MaxPooling2D(2);
        add Dropout(0.25);

        add Conv2D(64, (3, 3), (1, 1), (0, 0), false);
        add Activation("relu");
        add Conv2D(64, (3, 3), (1, 1), (0, 0), false);
        add Activation("relu");
        add MaxPooling2D(2);
        add Dropout(0.25);

        add Dense(512);
        add Activation("relu");
        add Dropout(0.5);
        add Dense(10);
        add Activation("softmax");
    };
    sink(Out) {
        work {
            
        }
        window{
            Out sliding(784, 784);
        }
    };
}